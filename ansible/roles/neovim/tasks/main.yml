---
- name: "Set source path, owner, and build user based on shared vs. non-shared"
  ansible.builtin.set_fact:
    nvim_source_path: >-
      {{ '/usr/local/src/neovim' if neovim_shared else ('~' + neovim_user + '/src/neovim') }}
    nvim_owner: "{{ 'root' if neovim_shared else neovim_user }}"
    nvim_build_user: "{{ 'root' if neovim_shared else neovim_user }}"
  changed_when: false

- name: Check if Neovim is already installed as a command
  ansible.builtin.command: "which nvim"
  register: nvim_check
  changed_when: false
  failed_when: false

- name: Print Neovim status
  ansible.builtin.debug:
    msg: "Neovim is already installed at {{ nvim_check.stdout }}"
  when: nvim_check.rc != 0 or force_build | default(false)

- name: Ensure required build dependencies are installed
  ansible.builtin.package:
    name:
      - ninja-build
      - gettext
      - cmake
      - g++
      - git
      - ripgrep #
    state: present
  become: true
  when:
    - ansible_os_family != 'Darwin'
    - nvim_check.rc != 0 or force_build | default(false)

- name: Check if Neovim source is already downloaded
  ansible.builtin.stat:
    path: "{{ nvim_source_path }}/.git"
  register: nvim_sshkey_folder

- name: Clone Neovim repository
  ansible.builtin.git:
    repo: "https://github.com/neovim/neovim.git"
    dest: "{{ nvim_source_path }}"
    version: "{{ nvim_version | default('master') }}"
    depth: 1
    force: "{{ force_build | default(false) }}"
  register: clone
  when:
    - force_build | default(false) or not nvim_sshkey_folder.stat.exists
    - nvim_check.rc != 0 or force_build | default(false)

- name: Ensure Neovim source directory has correct permissions
  ansible.builtin.file:
    path: "{{ nvim_source_path }}"
    state: directory
    owner: "{{ nvim_owner }}"
    group: "{{ neovim_group_user if not neovim_shared else 'root' }}"
    mode: '0755'

- name: Check if Neovim binary already exists
  ansible.builtin.stat:
    path: "{{ nvim_source_path }}/build/bin/nvim"
  register: nvim_binary

- name: Build Neovim from source
  community.general.make:
    chdir: "{{ nvim_source_path }}"
    params:
      CMAKE_BUILD_TYPE: RelWithDebInfo
  register: build_neovim
  become: true
  become_user: "{{ nvim_build_user }}"
  changed_when: "'[100%]' in build_neovim.stdout or '[100%]' in build_neovim.stderr"
  when:
    - force_build | default(false) or not nvim_binary.stat.exists
    - nvim_check.rc != 0 or force_build | default(false)


- name: Check if Neovim binary was built
  ansible.builtin.stat:
    path: "{{ nvim_source_path }}/build/bin/nvim"
  register: nvim_binary_check

- name: Fail if Neovim build was unsuccessful
  ansible.builtin.fail:
    msg: "Neovim build failed! Binary was not found at {{ nvim_source_path }}/build/bin/nvim"
  when:
    - not nvim_binary_check.stat.exists
    - nvim_check.rc != 0 or force_build | default(false)

- name: Install Neovim
  community.general.make:
    chdir: "{{ nvim_source_path }}"
    target: install
  become: true
  become_user: "{{ nvim_build_user }}"
  register: install_neovim
  changed_when: "'-- Installing:' in install_neovim.stdout or '-- Installing:' in install_neovim.stderr"
  when:
    - build_neovim.changed
    - nvim_check.rc != 0 or force_build | default(false)

- name: Remove build folder (optional)
  ansible.builtin.file:
    path: "{{ nvim_source_path }}/build"
    state: absent
  when:
    - remove_build_after | default(false)
    - nvim_check.rc != 0 or force_build | default(false)
